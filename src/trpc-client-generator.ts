import path from "path";
import fs from "fs";
import { ensureDirExists } from "./helpers";

async function generateTrpcClient(absoluteGeneratedDir: string) {
  console.log(`Generating TRPC client... ${absoluteGeneratedDir}`);
  await generateClientSide(absoluteGeneratedDir);
}

async function generateClientSide(absoluteGeneratedDir: string) {
  const clientDir = path.resolve(absoluteGeneratedDir, "./_trpc");
  ensureDirExists(clientDir);

  // Generate client.ts
  const clientContent = `import { createTRPCReact } from "@trpc/react-query";
import { type AppRouter } from "@/server/routers/_app";

export const trpc = createTRPCReact<AppRouter>({});`;

  fs.writeFileSync(path.resolve(clientDir, "client.ts"), clientContent);

  // Generate provider.tsx
  const providerContent = `"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { httpBatchLink } from "@trpc/client";
import React, { useState } from "react";

import { trpc } from "./client";

export interface ProviderProps {
  children: React.ReactNode;
}

export default function Provider({ children }: ProviderProps) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 5 * 1000,
        refetchOnWindowFocus: false,
      },
    },
  }));

  const [trpcClient] = useState(() =>
    trpc.createClient({
      links: [
        httpBatchLink({
          url: process.env.NEXT_PUBLIC_API_BASE_URL + "/api/trpc" || "http://localhost:3000/api/trpc",
          // Add custom headers here if needed
          headers() {
            return {
              // authorization: getAuthCookie(),
            };
          },
        }),
      ],
    })
  );

  return (
    <trpc.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </trpc.Provider>
  );
}`;

  fs.writeFileSync(path.resolve(clientDir, "Provider.tsx"), providerContent);

  // Generate index.ts barrel file
  const indexContent = `export { default as TRPCProvider } from './Provider';
export { trpc } from './client';`;

  fs.writeFileSync(path.resolve(clientDir, "index.ts"), indexContent);

  console.log("tRPC client-side files generated successfully!");

  // Update layout.tsx if it exists
  await findAndUpdateRootLayout(absoluteGeneratedDir);
}

async function findAndUpdateRootLayout(absoluteGeneratedDir: string) {
  // Ensure the app directory exists
  const appDir = path.resolve(absoluteGeneratedDir, "./app");
  ensureDirExists(appDir);

  const layoutFiles = [
    path.resolve(appDir, "layout.tsx"),
    path.resolve(appDir, "layout.js"),
    path.resolve(appDir, "layout.jsx"),
  ];

  let layoutPath = layoutFiles.find((file) => fs.existsSync(file));

  if (!layoutPath) {
    // If no layout file exists, create one
    layoutPath = path.resolve(appDir, "layout.tsx");
    const defaultLayout = `import { TRPCProvider } from "${absoluteGeneratedDir}/_trpc";

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <TRPCProvider>
          {children}
        </TRPCProvider>
      </body>
    </html>
  );
}`;

    fs.writeFileSync(layoutPath, defaultLayout);
    console.log("Created new layout.tsx with tRPC Provider");
    return;
  }

  // Read existing layout file
  let content = fs.readFileSync(layoutPath, "utf-8");

  // Check if TRPCProvider is already imported
  if (!content.includes("@/app/_trpc")) {
    // Add import statement at the beginning of the file
    const importStatement = `import { TRPCProvider } from "@/app/_trpc";\n`;
    content = importStatement + content;

    // Find the root element that contains children
    const jsxPattern = /<(html|div|main)[^>]*>[\s\S]*?{children}[\s\S]*?<\/\1>/;
    const match = content.match(jsxPattern);

    if (match) {
      const originalJSX = match[0];
      const wrappedJSX = originalJSX.replace(
        "{children}",
        "<TRPCProvider>{children}</TRPCProvider>"
      );
      content = content.replace(originalJSX, wrappedJSX);
    } else {
      console.warn(
        "Could not automatically insert TRPCProvider. Please add it manually around your children in layout.tsx"
      );
    }

    // Write the modified content back to the file
    fs.writeFileSync(layoutPath, content);
    console.log("Updated layout.tsx with tRPC Provider");
  }
}

export { generateTrpcClient };
